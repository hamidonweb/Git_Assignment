{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = domparser;\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n// match-all-characters in case of newlines (DOTALL)\nvar HEAD_TAG_REGEX = /<head[^]*>/i;\nvar BODY_TAG_REGEX = /<body[^]*>/i;\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromDocument = function (html, tagName) {\n  /* istanbul ignore next */\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromString = function (html, tagName) {\n  /* istanbul ignore next */\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\nvar DOMParser = typeof window === 'object' && window.DOMParser;\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof DOMParser === 'function') {\n  var domParser_1 = new DOMParser();\n  var mimeType_1 = 'text/html';\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param html - The HTML string.\n   * @param tagName - The element to render the HTML (with 'body' as fallback).\n   * @returns - Document.\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      /* istanbul ignore next */\n      html = \"<\".concat(tagName, \">\").concat(html, \"</\").concat(tagName, \">\");\n    }\n    return domParser_1.parseFromString(html, mimeType_1);\n  };\n  parseFromDocument = parseFromString;\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (typeof document === 'object' && document.implementation) {\n  var htmlDocument_1 = document.implementation.createHTMLDocument();\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param html - The HTML string.\n   * @param tagName - The element to render the HTML (with 'body' as fallback).\n   * @returns - Document\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      var element = htmlDocument_1.documentElement.querySelector(tagName);\n      if (element) {\n        element.innerHTML = html;\n      }\n      return htmlDocument_1;\n    }\n    htmlDocument_1.documentElement.innerHTML = html;\n    return htmlDocument_1;\n  };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = typeof document === 'object' && document.createElement('template');\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromTemplate;\nif (template && template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param html - HTML string.\n   * @returns - Nodes.\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param html - HTML markup.\n * @returns - DOM nodes.\n */\nfunction domparser(html) {\n  var _a, _b;\n  var match = html.match(FIRST_TAG_REGEX);\n  var firstTagName = match && match[1] ? match[1].toLowerCase() : '';\n  switch (firstTagName) {\n    case HTML:\n      {\n        var doc = parseFromString(html);\n        // the created document may come with filler head/body elements,\n        // so make sure to remove them if they don't actually exist\n        if (!HEAD_TAG_REGEX.test(html)) {\n          var element = doc.querySelector(HEAD);\n          (_a = element === null || element === void 0 ? void 0 : element.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(element);\n        }\n        if (!BODY_TAG_REGEX.test(html)) {\n          var element = doc.querySelector(BODY);\n          (_b = element === null || element === void 0 ? void 0 : element.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n        }\n        return doc.querySelectorAll(HTML);\n      }\n    case HEAD:\n    case BODY:\n      {\n        var elements = parseFromDocument(html).querySelectorAll(firstTagName);\n        // if there's a sibling element, then return both elements\n        if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n          return elements[0].parentNode.childNodes;\n        }\n        return elements;\n      }\n    // low-level tag or text\n    default:\n      {\n        if (parseFromTemplate) {\n          return parseFromTemplate(html);\n        }\n        var element = parseFromDocument(html, BODY).querySelector(BODY);\n        return element.childNodes;\n      }\n  }\n}","map":{"version":3,"names":["exports","default","domparser","HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","parseFromDocument","html","tagName","Error","parseFromString","DOMParser","window","domParser_1","mimeType_1","concat","document","implementation","htmlDocument_1","createHTMLDocument","element","documentElement","querySelector","innerHTML","template","createElement","parseFromTemplate","content","childNodes","match","firstTagName","toLowerCase","doc","test","_a","parentNode","removeChild","_b","querySelectorAll","elements"],"sources":["D:\\mydata\\my_projects\\zode\\assignment\\hamid_webApp\\node_modules\\html-dom-parser\\src\\client\\domparser.ts"],"sourcesContent":["// constants\nconst HTML = 'html';\nconst HEAD = 'head';\nconst BODY = 'body';\nconst FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n\n// match-all-characters in case of newlines (DOTALL)\nconst HEAD_TAG_REGEX = /<head[^]*>/i;\nconst BODY_TAG_REGEX = /<body[^]*>/i;\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nlet parseFromDocument = (html: string, tagName?: string): Document => {\n  /* istanbul ignore next */\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`',\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nlet parseFromString = (html: string, tagName?: string): Document => {\n  /* istanbul ignore next */\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`',\n  );\n};\n\nconst DOMParser = typeof window === 'object' && window.DOMParser;\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof DOMParser === 'function') {\n  const domParser = new DOMParser();\n  const mimeType = 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param html - The HTML string.\n   * @param tagName - The element to render the HTML (with 'body' as fallback).\n   * @returns - Document.\n   */\n  parseFromString = (html: string, tagName?: string): Document => {\n    if (tagName) {\n      /* istanbul ignore next */\n      html = `<${tagName}>${html}</${tagName}>`;\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (typeof document === 'object' && document.implementation) {\n  const htmlDocument = document.implementation.createHTMLDocument();\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param html - The HTML string.\n   * @param tagName - The element to render the HTML (with 'body' as fallback).\n   * @returns - Document\n   */\n  parseFromDocument = function (html: string, tagName?: string): Document {\n    if (tagName) {\n      const element = htmlDocument.documentElement.querySelector(tagName);\n\n      if (element) {\n        element.innerHTML = html;\n      }\n\n      return htmlDocument;\n    }\n\n    htmlDocument.documentElement.innerHTML = html;\n    return htmlDocument;\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nconst template =\n  typeof document === 'object' && document.createElement('template');\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nlet parseFromTemplate: (html: string) => NodeList;\n\nif (template && template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param html - HTML string.\n   * @returns - Nodes.\n   */\n  parseFromTemplate = (html: string): NodeList => {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param html - HTML markup.\n * @returns - DOM nodes.\n */\nexport default function domparser(html: string): NodeList {\n  const match = html.match(FIRST_TAG_REGEX);\n  const firstTagName = match && match[1] ? match[1].toLowerCase() : '';\n\n  switch (firstTagName) {\n    case HTML: {\n      const doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        const element = doc.querySelector(HEAD);\n        element?.parentNode?.removeChild(element);\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        const element = doc.querySelector(BODY);\n        element?.parentNode?.removeChild(element);\n      }\n\n      return doc.querySelectorAll(HTML);\n    }\n\n    case HEAD:\n    case BODY: {\n      const elements = parseFromDocument(html).querySelectorAll(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode!.childNodes;\n      }\n\n      return elements;\n    }\n\n    // low-level tag or text\n    default: {\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n      const element = parseFromDocument(html, BODY).querySelector(BODY);\n      return element!.childNodes;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}