{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = attributesToProps;\nvar react_property_1 = require(\"react-property\");\nvar utilities_1 = require(\"./utilities\");\n// https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components\n// https://developer.mozilla.org/docs/Web/HTML/Attributes\nvar UNCONTROLLED_COMPONENT_ATTRIBUTES = ['checked', 'value'];\nvar UNCONTROLLED_COMPONENT_NAMES = ['input', 'select', 'textarea'];\nvar valueOnlyInputs = {\n  reset: true,\n  submit: true\n};\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param attributes - HTML/SVG DOM attributes.\n * @param nodeName - DOM node name.\n * @returns - React props.\n */\nfunction attributesToProps(attributes, nodeName) {\n  if (attributes === void 0) {\n    attributes = {};\n  }\n  var props = {};\n  var isInputValueOnly = Boolean(attributes.type && valueOnlyInputs[attributes.type]);\n  for (var attributeName in attributes) {\n    var attributeValue = attributes[attributeName];\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if ((0, react_property_1.isCustomAttribute)(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n    // convert HTML/SVG attribute to React prop\n    var attributeNameLowerCased = attributeName.toLowerCase();\n    var propName = getPropName(attributeNameLowerCased);\n    if (propName) {\n      var propertyInfo = (0, react_property_1.getPropertyInfo)(propName);\n      // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\n      if (UNCONTROLLED_COMPONENT_ATTRIBUTES.includes(propName) && UNCONTROLLED_COMPONENT_NAMES.includes(nodeName) && !isInputValueOnly) {\n        propName = getPropName('default' + attributeNameLowerCased);\n      }\n      props[propName] = attributeValue;\n      switch (propertyInfo && propertyInfo.type) {\n        case react_property_1.BOOLEAN:\n          props[propName] = true;\n          break;\n        case react_property_1.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n          break;\n      }\n      continue;\n    }\n    // preserve custom attribute if React >=16\n    if (utilities_1.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n  // transform inline style to object\n  (0, utilities_1.setStyleProp)(attributes.style, props);\n  return props;\n}\n/**\n * Gets prop name from lowercased attribute name.\n *\n * @param attributeName - Lowercased attribute name.\n * @returns - Prop name.\n */\nfunction getPropName(attributeName) {\n  return react_property_1.possibleStandardNames[attributeName];\n}","map":{"version":3,"names":["exports","default","attributesToProps","react_property_1","require","utilities_1","UNCONTROLLED_COMPONENT_ATTRIBUTES","UNCONTROLLED_COMPONENT_NAMES","valueOnlyInputs","reset","submit","attributes","nodeName","props","isInputValueOnly","Boolean","type","attributeName","attributeValue","isCustomAttribute","attributeNameLowerCased","toLowerCase","propName","getPropName","propertyInfo","getPropertyInfo","includes","BOOLEAN","OVERLOADED_BOOLEAN","PRESERVE_CUSTOM_ATTRIBUTES","setStyleProp","style","possibleStandardNames"],"sources":["D:\\mydata\\my_projects\\zode\\assignment\\hamid_webApp\\node_modules\\html-react-parser\\src\\attributes-to-props.ts"],"sourcesContent":["import {\n  BOOLEAN,\n  getPropertyInfo,\n  isCustomAttribute,\n  OVERLOADED_BOOLEAN,\n  possibleStandardNames,\n} from 'react-property';\n\nimport { PRESERVE_CUSTOM_ATTRIBUTES, setStyleProp } from './utilities';\n\n// https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components\n// https://developer.mozilla.org/docs/Web/HTML/Attributes\nconst UNCONTROLLED_COMPONENT_ATTRIBUTES = ['checked', 'value'] as const;\nconst UNCONTROLLED_COMPONENT_NAMES = ['input', 'select', 'textarea'] as const;\n\ntype UncontrolledComponentAttributes =\n  (typeof UNCONTROLLED_COMPONENT_ATTRIBUTES)[number];\n\ntype UncontrolledComponentNames = (typeof UNCONTROLLED_COMPONENT_NAMES)[number];\n\nconst valueOnlyInputs = {\n  reset: true,\n  submit: true,\n} as const;\n\nexport type ValueOnlyInputsKeys = keyof typeof valueOnlyInputs;\n\nexport type Attributes = Record<PropertyKey, string>;\n\nexport type Props = Record<PropertyKey, string | boolean> & {\n  dangerouslySetInnerHTML?: {\n    __html: string;\n  };\n  key?: string | number;\n  style?: Record<PropertyKey, string>;\n};\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param attributes - HTML/SVG DOM attributes.\n * @param nodeName - DOM node name.\n * @returns - React props.\n */\nexport default function attributesToProps(\n  attributes: Attributes = {},\n  nodeName?: string,\n): Props {\n  const props: Props = {};\n\n  const isInputValueOnly = Boolean(\n    attributes.type && valueOnlyInputs[attributes.type as ValueOnlyInputsKeys],\n  );\n\n  for (const attributeName in attributes) {\n    const attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML/SVG attribute to React prop\n    const attributeNameLowerCased = attributeName.toLowerCase();\n    let propName = getPropName(attributeNameLowerCased);\n\n    if (propName) {\n      const propertyInfo = getPropertyInfo(propName);\n\n      // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\n      if (\n        UNCONTROLLED_COMPONENT_ATTRIBUTES.includes(\n          propName as UncontrolledComponentAttributes,\n        ) &&\n        UNCONTROLLED_COMPONENT_NAMES.includes(\n          nodeName! as UncontrolledComponentNames,\n        ) &&\n        !isInputValueOnly\n      ) {\n        propName = getPropName('default' + attributeNameLowerCased);\n      }\n\n      props[propName] = attributeValue;\n\n      switch (propertyInfo && propertyInfo.type) {\n        case BOOLEAN:\n          props[propName] = true;\n          break;\n        case OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n          break;\n      }\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  setStyleProp(attributes.style, props);\n\n  return props;\n}\n\n/**\n * Gets prop name from lowercased attribute name.\n *\n * @param attributeName - Lowercased attribute name.\n * @returns - Prop name.\n */\nfunction getPropName(attributeName: string): string {\n  return possibleStandardNames[attributeName];\n}\n"],"mappings":";;;;;AA4CAA,OAAA,CAAAC,OAAA,GAAAC,iBAAA;AA5CA,IAAAC,gBAAA,GAAAC,OAAA;AAQA,IAAAC,WAAA,GAAAD,OAAA;AAEA;AACA;AACA,IAAME,iCAAiC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAU;AACvE,IAAMC,4BAA4B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAU;AAO7E,IAAMC,eAAe,GAAG;EACtBC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE;CACA;AAcV;;;;;;;AAOA,SAAwBR,iBAAiBA,CACvCS,UAA2B,EAC3BC,QAAiB;EADjB,IAAAD,UAAA;IAAAA,UAAA,KAA2B;EAAA;EAG3B,IAAME,KAAK,GAAU,EAAE;EAEvB,IAAMC,gBAAgB,GAAGC,OAAO,CAC9BJ,UAAU,CAACK,IAAI,IAAIR,eAAe,CAACG,UAAU,CAACK,IAA2B,CAAC,CAC3E;EAED,KAAK,IAAMC,aAAa,IAAIN,UAAU,EAAE;IACtC,IAAMO,cAAc,GAAGP,UAAU,CAACM,aAAa,CAAC;IAEhD;IACA,IAAI,IAAAd,gBAAA,CAAAgB,iBAAiB,EAACF,aAAa,CAAC,EAAE;MACpCJ,KAAK,CAACI,aAAa,CAAC,GAAGC,cAAc;MACrC;IACF;IAEA;IACA,IAAME,uBAAuB,GAAGH,aAAa,CAACI,WAAW,EAAE;IAC3D,IAAIC,QAAQ,GAAGC,WAAW,CAACH,uBAAuB,CAAC;IAEnD,IAAIE,QAAQ,EAAE;MACZ,IAAME,YAAY,GAAG,IAAArB,gBAAA,CAAAsB,eAAe,EAACH,QAAQ,CAAC;MAE9C;MACA,IACEhB,iCAAiC,CAACoB,QAAQ,CACxCJ,QAA2C,CAC5C,IACDf,4BAA4B,CAACmB,QAAQ,CACnCd,QAAuC,CACxC,IACD,CAACE,gBAAgB,EACjB;QACAQ,QAAQ,GAAGC,WAAW,CAAC,SAAS,GAAGH,uBAAuB,CAAC;MAC7D;MAEAP,KAAK,CAACS,QAAQ,CAAC,GAAGJ,cAAc;MAEhC,QAAQM,YAAY,IAAIA,YAAY,CAACR,IAAI;QACvC,KAAKb,gBAAA,CAAAwB,OAAO;UACVd,KAAK,CAACS,QAAQ,CAAC,GAAG,IAAI;UACtB;QACF,KAAKnB,gBAAA,CAAAyB,kBAAkB;UACrB,IAAIV,cAAc,KAAK,EAAE,EAAE;YACzBL,KAAK,CAACS,QAAQ,CAAC,GAAG,IAAI;UACxB;UACA;MACJ;MACA;IACF;IAEA;IACA,IAAIjB,WAAA,CAAAwB,0BAA0B,EAAE;MAC9BhB,KAAK,CAACI,aAAa,CAAC,GAAGC,cAAc;IACvC;EACF;EAEA;EACA,IAAAb,WAAA,CAAAyB,YAAY,EAACnB,UAAU,CAACoB,KAAK,EAAElB,KAAK,CAAC;EAErC,OAAOA,KAAK;AACd;AAEA;;;;;;AAMA,SAASU,WAAWA,CAACN,aAAqB;EACxC,OAAOd,gBAAA,CAAA6B,qBAAqB,CAACf,aAAa,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}